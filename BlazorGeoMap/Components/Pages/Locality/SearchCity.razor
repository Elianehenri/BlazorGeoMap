@page "/locality/search-city"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@* @attribute [StreamRendering(true)] *@
@rendermode InteractiveServer


<link rel="stylesheet" href="SearchCity.razor.css">
<h3>Pesquisar por Cidade</h3>

<div class="form-group">
    <label for="city">Cidade:</label>
    <br />
    <div class="form-control-container">
        <input type="text" class="form-control" id="city" bind="@searchCity" @oninput="OnCityInputChange" placeholder="Digite o nome da cidade" />
        <br />
        <button class="btn btn-primary" @onclick="PerformSearch">Pesquisar</button>

        &nbsp;&nbsp;
        <NavLink href="/locality">Cancelar</NavLink>
    </div>
</div>



@if (searchResult.Any())
{
    <table class="table mt-3">
        <!-- Cabeçalho da tabela -->
        <thead>
            <tr>
                <th>Id</th>
                <th>Cidade</th>
                <th>Ações</th>
            </tr>
        </thead>
        <!-- Corpo da tabela -->
        <tbody>
            @foreach (var locality in searchResult)
            {
                <tr>
                    <td>@locality.Id</td>
                    <td>@locality.City</td>
                    <td>
                        <NavLink class="btn btn-info" href=@($"locality/edit/{locality.Id}")>Edit</NavLink>
                        @* <NavLink class="btn btn-danger" href=@($"locality/delete/{locality.Id}")>Excluir</NavLink> *@
                        <NavLink class="btn btn-danger" href=@($"locality/delete/{Uri.EscapeDataString(locality.Id.ToString())}")>Excluir</NavLink>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}
else if (searchPerformed)
{
    <p class="text-center">
        <em>Nenhum resultado encontrado.</em>
    </p>
}

@code {
    private string searchCity = string.Empty;
    private List<Locality> searchResult = new List<Locality>();
    private bool searchPerformed = false;

    [Inject]
    public ApplicationDbContext LocalityContext { get; set; }

    private void OnCityInputChange(ChangeEventArgs e)
    {
        searchCity = e.Value?.ToString().Trim();
    }


    public async Task PerformSearch()
    {
        try
        {
            searchPerformed = true;
            Console.WriteLine($"Valor de searchCity: {searchCity}");

            // Realize a pesquisa na coleção de localidades usando LINQ
            searchResult = Context.IBGE
                .Where(locality => EF.Functions.Like(locality.City, $"%{searchCity}%"))
                .AsNoTracking()
                .ToList();

            // Adicione a seguinte linha para forçar a atualização da interface
            StateHasChanged();

            // Console log para depuração
            await JSRuntime.InvokeVoidAsync("console.log", $"Número de resultados: {searchResult.Count}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Erro durante a pesquisa: {ex.Message}");
        }
    }

}
